version: "3.8"

x-common-env: &common-env
  TZ: ${TZ:-Europe/Paris}
  PUID: ${PUID:-1000}
  PGID: ${PGID:-1000}

networks:
  appnet: {}

volumes:
  pg_data: {}
  ap_cache: {}
  nc_data: {}
  organizr_config: {}

services:
  postgres:
    image: docker.io/postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data
      # Optionnel : crée les DB au premier démarrage
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks: [appnet]

  activepieces:
    image: ghcr.io/activepieces/activepieces:latest
    container_name: activepieces
    restart: unless-stopped
    env_file: .env
    environment:
      # On force l’hôte Postgres sur le nom du service docker
      AP_POSTGRES_HOST: postgres
      AP_POSTGRES_PORT: 5432
      AP_POSTGRES_DATABASE: ${AP_POSTGRES_DATABASE:-activepieces}
    ports:
      - "${ACTIVEPIECES_PORT:-8080}:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ap_cache:/usr/src/app/cache
    networks: [appnet]

  nocodb:
    image: docker.io/nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    environment:
      # Connexion à Postgres unique
      NC_DB: "pg://postgres:5432?u=${POSTGRES_USER:-postgres}&p=${POSTGRES_PASSWORD:-password}&d=${NOCODB_DB:-nocodb}"
    ports:
      - "${NOCODB_PORT:-8089}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - nc_data:/usr/app/data
    networks: [appnet]

  organizr:
    image: lscr.io/linuxserver/organizr:latest
    container_name: organizr
    restart: unless-stopped
    environment:
      <<: *common-env
    ports:
      - "${ORGANIZR_PORT:-8081}:80"
    volumes:
      - organizr_config:/config
    networks: [appnet]

  # Exemple d’app future : active via `--profile extras`
  # appflowy:
  #   image: ghcr.io/appflowy-io/appflowy:latest
  #   profiles: ["extras"]
  #   networks: [appnet]
  #   ...

